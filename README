````markdown
<h1 align="center">‚ö° Learn UV Fast</h1>

<p align="center">
  <b>Install, set up a project, manage environments, and ship ‚Äî all with UV.</b><br>
  <i>Built with ‚ù§Ô∏è using Astral‚Äôs ultra-fast Python project manager.</i>
</p>

<p align="center">
  <a href="https://astral.sh/uv"><img src="https://img.shields.io/badge/Built%20with-UV-0b3d91?style=for-the-badge&logo=python&logoColor=yellow" alt="Built with UV"></a>
  <a href="https://github.com/astral-sh/uv"><img src="https://img.shields.io/badge/Project-Astral-blue?style=for-the-badge&logo=github"></a>
  <a href="https://python.org"><img src="https://img.shields.io/badge/Python-3.11%2B-green?style=for-the-badge&logo=python&logoColor=white"></a>
</p>


## üß† What is UV?

**UV** is a blazing-fast Python package and project manager by [Astral](https://astral.sh).  
It unifies **Python installation**, **virtual environments**, **dependency management**, and **task running** ‚Äî all in one sleek CLI tool.

### ‚ú® Features
- ‚ö° **Ultra-fast** installs and dependency resolution  
- üß© **Manages Python versions and environments together**  
- üîß **Drop-in commands** for everyday workflows  
- üß∞ **Cross-platform** (macOS, Linux, Windows)



## üöÄ Installation

### üêß macOS & Linux
```bash
curl -LsSf https://astral.sh/uv/install.sh | sh
````

### ü™ü Windows (PowerShell)

```powershell
iwr https://astral.sh/uv/install.ps1 -UseBasicParsing | iex
```

### ‚úÖ Verify Installation

```bash
uv --version
```

> üí° If `uv` isn‚Äôt found, open a new terminal or add UV‚Äôs bin path to your `PATH`.

---

## üêç Manage Python Versions

```bash
uv python list               # List installed interpreters
uv python install 3.12       # Install Python 3.12
uv python run -p 3.12 python --version
```

UV manages Python itself, so no need for `pyenv` or `conda`!

---

## üèóÔ∏è Start a New Project

```bash
mkdir hello-uv && cd hello-uv
uv init
```

This creates a `pyproject.toml` and initializes your workspace.

```bash
uv venv          # create .venv
uv sync          # lock and install dependencies
```

---

## üì¶ Add Dependencies

```bash
uv add requests
uv add fastapi uvicorn
uv add --dev pytest ruff
```

View dependency tree:

```bash
uv tree
```

---

## ‚ñ∂Ô∏è Run Code & Tools

UV runs commands in the correct virtual environment automatically.

```bash
uv run python main.py
uv run pytest -q
uv run ruff check .
```

### Define Scripts in `pyproject.toml`

```toml
[tool.uv.scripts]
start = "python -m hello_uv"
test = "pytest -q"
```

Then run:

```bash
uv run start
uv run test
```

---

## üîí Locking & Reproducibility

```bash
uv lock
uv sync
uv sync --frozen   # fails if lockfile is outdated
```

Export requirements for non-UV tools:

```bash
uv export -o requirements.txt
```

---

## üå± Virtual Environments

```bash
uv venv
uv venv --python 3.11
uv venv --prompt hello
```

Manual activation (if needed):

* **bash/zsh:** `source .venv/bin/activate`
* **PowerShell:** `.venv\Scripts\Activate.ps1`

> üí° Use `uv run` to skip manual activation entirely.

---

## üß© Add a Simple Module

```bash
mkdir -p src/hello_uv
printf "def greet(name):\n    return f'Hello, {name}!'\n" > src/hello_uv/__init__.py
printf "from hello_uv import greet\nprint(greet('UV'))\n" > main.py

uv run python main.py
```

---

## üß™ Testing & Linting

```bash
uv add --dev pytest ruff
uv run pytest -q
uv run ruff check src tests
```

Optional: configure both in `pyproject.toml` for zero-config runs.

---

## üì¶ Build & Publish (Optional)

```bash
uv build
uv publish --username __token__ --password $PYPI_TOKEN
```

> üîë Make sure `$PYPI_TOKEN` is exported in your shell.

---

## üß≠ Cheat Sheet

| üß© Category | üîß Command                      | üìù Description       |
| ----------- | ------------------------------- | -------------------- |
| **Project** | `uv init`                       | Initialize project   |
|             | `uv add <pkg>`                  | Add dependency       |
|             | `uv sync [--frozen]`            | Sync dependencies    |
| **Python**  | `uv python list`                | List interpreters    |
|             | `uv python install <ver>`       | Install Python       |
| **Env**     | `uv venv`                       | Create virtualenv    |
|             | `uv run <cmd>`                  | Run command in env   |
| **Inspect** | `uv tree`                       | Show dependency tree |
|             | `uv cache clean`                | Clear cache          |
| **Export**  | `uv export -o requirements.txt` | Export requirements  |

---

## ü©∫ Troubleshooting

| ‚ö†Ô∏è Issue                | üí° Solution                                  |
| ----------------------- | -------------------------------------------- |
| `uv: command not found` | Open new shell or add to PATH                |
| SSL / network errors    | Retry with stable connection or proxy config |
| Build failures          | Install compiler tools and Python headers    |

---

## ‚ö° Quick Start in 60 Seconds

```bash
# 1Ô∏è‚É£ Install
curl -LsSf https://astral.sh/uv/install.sh | sh

# 2Ô∏è‚É£ New project
mkdir demo && cd demo && uv init

# 3Ô∏è‚É£ Add dependency
uv add requests

# 4Ô∏è‚É£ Run code
python - <<'PY'
import requests
print(requests.get("https://httpbin.org/status/200").status_code)
PY
```




